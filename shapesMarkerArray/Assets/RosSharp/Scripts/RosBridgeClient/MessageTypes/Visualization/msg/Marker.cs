/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

using RosSharp.RosBridgeClient.MessageTypes.Std;
using RosSharp.RosBridgeClient.MessageTypes.Geometry;

namespace RosSharp.RosBridgeClient.MessageTypes.Visualization
{
    public class Marker : Message
    {
        public const string RosMessageName = "visualization_msgs/Marker";

        public const uint ARROW = 0;
        public const uint CUBE = 1;
        public const uint SPHERE = 2;
        public const uint CYLINDER = 3;
        public const uint LINE_STRIP = 4;
        public const uint LINE_LIST = 5;
        public const uint CUBE_LIST = 6;
        public const uint SPHERE_LIST = 7;
        public const uint POINTS = 8;
        public const uint TEXT_VIEW_FACING = 9;
        public const uint MESH_RESOURCE = 10;
        public const uint TRIANGLE_LIST = 11;

        public const uint ADD = 0;
        public const uint MODIFY = 0;
        public const uint DELETE = 2;
        public const uint DELETEALL = 3;

        public Header header { get; set; } // header for time/frame information
        public string ns { get; set; } // Namespace to place this object in... used in conjunction with id to create a unique name for the object
        public int id { get; set; } // object ID useful in conjunction with the namespace for manipulating and deleting the object later
        public int type { get; set; } // Type of object
        public int action { get; set; } // 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
        public Pose pose { get; set; } // Pose of the object
        public Vector3 scale { get; set; } // Scale of the object 1,1,1 means default (usually 1 meter square)
        public ColorRGBA color { get; set; } // Color [0.0-1.0]
        public Duration lifetime { get; set; } // How long the object should last before being automatically deleted.  0 means forever
        public bool frame_locked { get; set; } // If this marker should be frame-locked, i.e. retransformed into its frame every timestep

        public Point[] points { get; set; }

        // Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
        // number of colors must either be 0 or equal to the number of points
        // NOTE: alpha is not yet used
        public ColorRGBA[] colors { get; set; }

        // NOTE: only used for text markers
        public string text { get; set; }

        // NOTE: only used for MESH_RESOURCE markers
        public string mesh_resource { get; set; }
        public bool mesh_use_embedded_materials { get; set; }
 
        public Marker()
        {
            this.header = new Header();
            this.ns = "";
            this.id = 0;
            this.type = 0;
            this.action = 0;
            this.pose = new Pose();
            this.scale = new Vector3();
            this.color = new ColorRGBA();
            this.lifetime = new Duration();
            this.frame_locked = false;
            this.points = new Point[0];
            this.colors = new ColorRGBA[0];
            this.text = "";
            this.mesh_resource = "";
            this.mesh_use_embedded_materials = false;
        }

        public Marker(Header header, string ns, int id, int type, int action, Pose pose, Vector3 scale, ColorRGBA color, Duration lifetime, bool frame_locked, Point[] points, ColorRGBA[] colors, string text, string mesh_resource, bool mesh_use_embedded_materials)
        {
            this.header = header;
            this.ns = ns;
            this.id = id;
            this.type = type;
            this.action = action;
            this.pose = pose;
            this.scale = scale;
            this.color = color;
            this.lifetime = lifetime;
            this.frame_locked = frame_locked;
            this.points = points;
            this.colors = colors;
            this.text = text;
            this.mesh_resource = mesh_resource;
            this.mesh_use_embedded_materials = mesh_use_embedded_materials;
        }
    }
}
